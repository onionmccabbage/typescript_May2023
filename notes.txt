ECMAScript and Typescript
=========================

Toby Dussek  May 22-24

9:30  start
11:00 coffee
12:30 lunch until 1:30
3:00  tea
4:30  end

code repo: https://github.com/onionmccabbage/typescript_May2023

Monday
> welcome and tech check
> choose a folder to work in: install NodeJS/npm then install typescript globaly
 > npm install -g typescript
  > npm install -g ts-node
  - may need to npm install types for (e.g.) @angular or @react or custom...
- Modern ECMAScript version, support, legacy...
   - common name JavaScript
   - also known as ECMAScript, ES, ES3, ES5, ES6 etc
   - sometimes referred to as ESNext, ES6+
   - recently ES2021, ES2022... (these are all names for JavaScript)
> TS is DEVELOPMENT TIME ONLY - it NEVER makes it to the end user
> sometimes it complains 'cannot find console...' - fix with ts-config DOM
- Typescript why and how
- tsconfig
q - return never
q - named tuples - schema
q - private...
- overload...
q - JavaScript like Java?? No, but Typescript is more like Java
> using class and interface for types
- best pactice: declare types/interfaces in another module and import that
> default ts output is ES3, we can --target es2022 (or relevant version)
- tidy way to see html pages - liveserver (and web browser events)
- support for older browsers etc.
> number data type
> functions and types
> classes
- ways to run and automate
- try a lab exercise

Tuesday
- brief review so far
- install coderunner extention - lets us run ts directly
- generics Array<T>
- importing modules
- begin looking at data sources: JSON etc
- is TS mainly just for type safety? No, also has language engine for code completion/introspection
- types or interface (or hybrid) - mainly aim for interface, then derive other types
- when/why you would use an Enum, Literal, tuple, Type, Interface 
  (how to choose one over another depending on what you are doing)
- https://webpack.js.org/guides/typescript/
- Promises
- fetch and async-await
- we can specify more than one generic type as <a, b>
- conventions, best practice, preference...
- many ways to write functions
- destructuring
- generator syntax (must use 'function*')
- type guards - simply use logical 'if' when we need to ensure types manually
- more on tsconfig: see the docs on tsconfig 
- review exercise

Wednesday
- npm init (and webpack)
- Brief overview of ReactJS (and the ReactJS Typescript template)
  "moduleResolution": "Node",
- React with Typescript generics
  NB you will need a trailing comma:
     const fn = async <T,>(): Promise< Array<T> > =>{}
  https://devtrium.com/posts/react-typescript-using-generics-in-react
- interface, class, implements, extends....
- more on classes
- more on modules and import (module.exports, type='module' old-skool commonJS etc.)
			in html... <script module></script>
- Observables and RxJS - lifecycle
  see https://rxjs.dev/guide/overview and https://rxmarbles.com/
- Array<T> and T[] are identical - it's a style choice
- final lab
- where to go next 
  https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html
- end of course feedback

